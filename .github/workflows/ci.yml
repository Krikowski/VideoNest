# .github/workflows/videonest-ci-cd.yml

name: VideoNest CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'VideoNest/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'VideoNest/**'

jobs:
  build-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.400' # Especificar a vers√£o exata do SDK local

    - name: Restore dependencies
      run: dotnet restore VideoNest/VideoNest.csproj

    - name: Build
      run: dotnet build VideoNest/VideoNest.csproj --no-restore --configuration Release

    - name: Run Unit Tests with Coverage
      run: dotnet test VideoNest/VideoNest.Tests/VideoNest.Tests.csproj --no-build --verbosity detailed --collect:"XPlat Code Coverage" --results-directory ./TestResults --logger:"trx;LogFileName=test-results.trx"
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: 1
        DOTNET_ROOT: /usr/share/dotnet

    - name: Upload Coverage Report
      uses: codecov/codecov-action@v4
      with:
        files: ./TestResults/coverage.opencover.xml
        token: ${{ secrets.CODECOV_TOKEN }}  # Opcional

  docker-build:
    runs-on: ubuntu-latest
    needs: build-test

    steps:
    - uses: actions/checkout@v4

    - name: Build Docker Image
      run: docker build -t Krikowski99/videonest-service:latest -f VideoNest/Dockerfile .

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push to Docker Hub (on main)
      if: github.ref == 'refs/heads/main'
      run: docker push Krikowski99/videonest-service:latest

  deploy:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Deploy to Server (Simulado)
      run: echo "Deploying to production server... (Integre com Kubernetes/Azure via secrets)"